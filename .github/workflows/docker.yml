# This action is used for building websoft9 docker images to DockerHub at one time
# This action is also release Media and Libarary with build apphub image

# It need LABEL version="" at your dockerfile. And it can divide version. e.g version v3.4.0.3 will divide to latest,v3,v3.4,v3.4.0,v3.4.0.3
# When version include "-", it not divide version and build ony one test image
# It have enable multiPlatform, you add more platform at platform: linux/amd64...
# If you add more paths for trigger, please update app_list= at set-matrix for it also
# MEDIA_FROM environment: source | artifact, when use source get from contentful and oss, use artifact download media-latest from Websoft9 artifact

name: Build image to DockerHub

on:
  push:
    branches: [main, dev]  # Include dev branch
    paths:
      - "docker/*/Dockerfile"

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - id: set-matrix
        run: |
          git diff --name-only HEAD^ HEAD
          changed_files=$(git diff --name-only HEAD^ HEAD)
          app_list=$(echo "$changed_files" | grep -E 'docker/.*/(Dockerfile)' | awk -F'/' '{print $2}' | sort | uniq)

          matrix_items=()
          for app in $app_list; do
            if [[ "$app" = "proxy" ]]; then
              # two versions for proxy app
              matrix_items+=("{\"app\":\"proxy\",\"modsecurity\":true,\"suffix\":\"-waf\"}")
              matrix_items+=("{\"app\":\"proxy\",\"modsecurity\":false,\"suffix\":\"\"}")
            else
              # other apps keep the original logic
              matrix_items+=("{\"app\":\"$app\",\"modsecurity\":null,\"suffix\":\"\"}")
            fi
          done

          if [ ${#matrix_items[@]} -eq 0 ]; then
            echo "::set-output name=matrix::{\"include\":[]}"
          else
            matrix_json="[$(IFS=','; echo "${matrix_items[*]}")]"
            echo "Matrix: $matrix_json"
            echo "::set-output name=matrix::{\"include\": $matrix_json}"
          fi

  build:
    needs: setup
    runs-on: ubuntu-latest
    env:
      MEDIA_FROM: "source"  # You can set it to choice where download from 
    strategy:
      matrix: ${{fromJson(needs.setup.outputs.matrix)}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Prepare tags and files for Docker build
        run: |
          APP=${{ matrix.app }}
          SUFFIX=${{ matrix.suffix }}
          MODSECURITY=${{ matrix.modsecurity }}
          TAG=$(grep 'LABEL version' "docker/$APP/Dockerfile" | cut -d'"' -f2 | xargs)
          echo $APP version is $TAG

          if [[ "$SUFFIX" != "" ]]; then
            if [[ $GITHUB_REF == *"refs/heads/dev"* ]]; then
              echo "CHANNEL=dev" >> $GITHUB_ENV
              if [[ "$TAG" == *"-"* ]]; then
                BASE_VERSION=$(echo "$TAG" | cut -d'-' -f1)
                RC_PART=$(echo "$TAG" | cut -d'-' -f2-)
                TAGS="$BASE_VERSION$SUFFIX-$RC_PART"
              else
                TAGS="$TAG$SUFFIX"
              fi
            else
              if [[ "$TAG" == *"-"* ]]; then
                echo "CHANNEL=rc" >> $GITHUB_ENV
                BASE_VERSION=$(echo "$TAG" | cut -d'-' -f1)
                RC_PART=$(echo "$TAG" | cut -d'-' -f2-)
                TAGS="$BASE_VERSION$SUFFIX-$RC_PART"
              else
                echo "CHANNEL=release" >> $GITHUB_ENV
                IFS='.' read -ra PARTS <<< "$TAG"
                TAG_PART=""
                for i in "${!PARTS[@]}"; do 
                  if [ "$i" -eq 0 ]; then 
                    TAG_PART="${PARTS[$i]}"
                  else 
                    TAG_PART="${TAG_PART}.${PARTS[$i]}"
                  fi
                  TAGS="${TAGS},${TAG_PART}$SUFFIX"
                done
              fi
            fi
          else
            # Determine the channel based on the branch and TAG
            if [[ $GITHUB_REF == *"refs/heads/dev"* ]]; then
              echo "CHANNEL=dev" >> $GITHUB_ENV
              TAGS="$TAG"  # Use the TAG directly for dev
            else
              if [[ "$TAG" == *"-"* ]]; then
                echo "CHANNEL=rc" >> $GITHUB_ENV
                TAGS="$TAG"
              else
                echo "CHANNEL=release" >> $GITHUB_ENV
                IFS='.' read -ra PARTS <<< "$TAG"
                TAGS="latest"
                TAG_PART=""
                for i in "${!PARTS[@]}"; do 
                  if [ "$i" -eq 0 ]; then 
                    TAG_PART="${PARTS[$i]}"
                  else 
                    TAG_PART="${TAG_PART}.${PARTS[$i]}"
                  fi
                  TAGS="${TAGS},${TAG_PART}"
                done
              fi
            fi
          fi
          echo "Building and pushing Docker image for $APP with tags: $TAGS"
          echo "TAGS=$TAGS" >> $GITHUB_ENV
          echo "APP=$APP" >> $GITHUB_ENV
          echo "DOCKERFILE=docker/$APP/Dockerfile" >> $GITHUB_ENV
          echo "DIRECTORY=docker/$APP" >> $GITHUB_ENV
          echo "README=docker/$APP/README.md" >> $GITHUB_ENV
          echo "MODSECURITY=$MODSECURITY" >> $GITHUB_ENV
      
      ##------------ special task for apphub begin----------------------#
      - name: Trigger media.yml workflow
        uses: mathze/workflow-dispatch-action@v1.1.0
        id: startAndWaitWorkflow
        with:
          workflow-name: media.yml
          token: ${{github.token}}
          run-id: dummy
          wait-interval: PT10S
        if: env.APP == 'apphub' && env.MEDIA_FROM == 'source'

      - name: Reuse workflow run id
        run: "echo ${{ steps.startAndWaitWorkflow.outputs.run-id }}"
        if: env.APP == 'apphub' && env.MEDIA_FROM == 'source'

      - name: Download media.zip from artifacts
        uses: dawidd6/action-download-artifact@v8
        with:
          workflow: media.yml
          name: media
          path: ${{env.DIRECTORY}}
          github_token: ${{ secrets.MYGITHUB_ADMIN_TOKEN }}
          run_id: ${{ steps.startAndWaitWorkflow.outputs.run-id }}
        if: env.APP == 'apphub' && env.MEDIA_FROM == 'source'

      - name: Download media-latest.zip from Websoft9 artifact    
        run: |  
          curl -o media.zip https://artifact.websoft9.com/release/websoft9/plugin/media/media-latest.zip
        if: env.MEDIA_FROM == 'artifact'

        # release docker-library
      - name: Trigger docker-libaray/release.yml workflow
        uses: peter-evans/repository-dispatch@v2
        with:
          repository: websoft9/docker-library
          event-type: custom_event
          token: ${{secrets.MYGITHUB_ADMIN_TOKEN}}
        if: env.APP == 'apphub'
      
        # release media step1
      - name: Create more files
        run: |
          version_core=$(grep 'ARG MEDIA_VERSION' "docker/apphub/Dockerfile" | cut -d'"' -f2 | xargs)
          cp ${{env.DIRECTORY}}/media.zip media/media-latest.zip
          cp media/media-latest.zip media/media-$version_core.zip
          jq --arg version "$version_core" '.Version = $version' media/media.json > media/temp.json && mv media/temp.json media/media.json
        if: env.APP == 'apphub' && env.MEDIA_FROM == 'source'
      
        # release media step2
      - name: Upload To cloudflare r2
        uses: ryand56/r2-upload-action@latest
        with:
          r2-account-id: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          r2-access-key-id: ${{ secrets.CLOUDFLARE_R2_SECRET_ID }}
          r2-secret-access-key: ${{ secrets.CLOUDFLARE_R2_SECRET_KEY }}
          r2-bucket: artifact
          source-dir: media
          destination-dir: ./${{ env.CHANNEL }}/websoft9/plugin/media
        if: env.APP == 'apphub' && env.MEDIA_FROM == 'source'

      - name: Purge Cloudflare Cache
        uses: jakejarvis/cloudflare-purge-action@master
        env:
          CLOUDFLARE_ZONE: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          PURGE_URLS: '["https://artifact.websoft9.com/${{ env.CHANNEL }}/websoft9/plugin/media/media-latest.zip"]'
        if: env.APP == 'apphub' && env.MEDIA_FROM == 'source'      
      ##------------ special task for apphub end----------------------#
      
      - name: Prepare build args
        run: |
          if [[ "${{ env.APP }}" == "proxy" ]]; then
              if [[ "${{ env.MODSECURITY }}" == "true" ]]; then
                BUILD_ARGS="ENABLE_MODSECURITY=true"
              elif [[ "${{ env.MODSECURITY }}" == "false" ]]; then
                BUILD_ARGS="ENABLE_MODSECURITY=false"
              fi
          fi
          echo "BUILD_ARGS=$BUILD_ARGS" >> $GITHUB_ENV

      - name: Build & push Docker image
        uses: mr-smithers-excellent/docker-build-push@v6
        with:
          image: websoft9dev/${{env.APP}}
          tags: ${{env.TAGS}}
          registry: docker.io
          directory: ${{env.DIRECTORY}}
          dockerfile: ${{env.DOCKERFILE}}
          buildArgs: ${{env.BUILD_ARGS}}
          multiPlatform: true
          platform: linux/amd64
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Hub Description
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: websoft9dev/${{env.APP}}
          readme-filepath: ${{env.README}}
        if: needs.setup.outputs.matrix != ''