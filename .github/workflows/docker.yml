# This action is used for building websoft9 docker images to DockerHub at one time
# This action is also release Media and Libarary with build apphub image

# It need LABEL version="" at your dockerfile. And it can divide version. e.g version v3.4.0.3 will divide to latest,v3,v3.4,v3.4.0,v3.4.0.3
# When version include "-", it not divide version and build ony one test image
# It have enable multiPlatform, you add more platform at platform: linux/amd64...
# If you add more paths for trigger, please update app_list= at set-matrix for it also
# MEDIA_FROM environment: source | artifact, when use source get from contentful and oss, use artifact download media-latest from Websoft9 artifact

name: Build image to DockerHub

on:
  push:
    branches: [main, dev]  # Include dev branch
    paths:
      - "docker/*/Dockerfile"

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - id: set-matrix
        run: |
          git diff --name-only HEAD^ HEAD
          changed_files=$(git diff --name-only HEAD^ HEAD)
          app_list=$(echo "$changed_files" | grep -E 'docker/.*/(Dockerfile)' | awk -F'/' '{print $2}' | sort | uniq)
          app_list_json=$(echo $app_list | jq -R -s -c 'split(" ")')
          echo "::set-output name=matrix::{\"app\": $app_list_json}"

  build:
    needs: setup
    runs-on: ubuntu-latest
    env:
      MEDIA_FROM: "source"  # You can set it to choice where download from 
    strategy:
      matrix: ${{fromJson(needs.setup.outputs.matrix)}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Prepare tags and files for Docker build
        run: |
          APP=${{ matrix.app }}
          TAG=$(grep 'LABEL version' "docker/$APP/Dockerfile" | cut -d'"' -f2 | xargs)
          echo $APP version is $TAG
          
          # Check if Dockerfile contains ModSecurity
          HAS_MODSECURITY=$(grep -c "ModSecurity\|modsecurity" "docker/$APP/Dockerfile" || echo "0")
          echo "ModSecurity found: $HAS_MODSECURITY"
          
          # Determine the channel based on the branch and TAG
          if [[ $GITHUB_REF == *"refs/heads/dev"* ]]; then
            echo "CHANNEL=dev" >> $GITHUB_ENV
            if [[ "$HAS_MODSECURITY" -gt "0" ]]; then
              BASE_TAGS="$TAG"
              WAF_TAGS="$TAG-waf"
            else
              BASE_TAGS="$TAG"
              WAF_TAGS=""
            fi
          else
            if [[ "$TAG" == *"-"* ]]; then
              echo "CHANNEL=rc" >> $GITHUB_ENV
              if [[ "$HAS_MODSECURITY" -gt "0" ]]; then
                # Extract base version without suffix (e.g., 2.12.6-rc4 -> 2.12.6)
                BASE_VERSION=$(echo "$TAG" | cut -d'-' -f1)
                BASE_TAGS="$BASE_VERSION"
                WAF_TAGS="$TAG-waf"
              else
                BASE_TAGS="$TAG"
                WAF_TAGS=""
              fi
            else
              echo "CHANNEL=release" >> $GITHUB_ENV
              IFS='.' read -ra PARTS <<< "$TAG"
              if [[ "$HAS_MODSECURITY" -gt "0" ]]; then
                # Generate base version tags (without WAF)
                BASE_TAGS="latest"
                TAG_PART=""
                for i in "${!PARTS[@]}"; do 
                  if [ "$i" -eq 0 ]; then 
                    TAG_PART="${PARTS[$i]}"
                  else 
                    TAG_PART="${TAG_PART}.${PARTS[$i]}"
                  fi
                  BASE_TAGS="${BASE_TAGS},${TAG_PART}"
                done
                # Generate WAF version tags
                WAF_TAGS="latest-waf"
                TAG_PART=""
                for i in "${!PARTS[@]}"; do 
                  if [ "$i" -eq 0 ]; then 
                    TAG_PART="${PARTS[$i]}"
                  else 
                    TAG_PART="${TAG_PART}.${PARTS[$i]}"
                  fi
                  WAF_TAGS="${WAF_TAGS},${TAG_PART}-waf"
                done
              else
                # Regular versioning for non-ModSecurity images
                BASE_TAGS="latest"
                TAG_PART=""
                for i in "${!PARTS[@]}"; do 
                  if [ "$i" -eq 0 ]; then 
                    TAG_PART="${PARTS[$i]}"
                  else 
                    TAG_PART="${TAG_PART}.${PARTS[$i]}"
                  fi
                  BASE_TAGS="${BASE_TAGS},${TAG_PART}"
                done
                WAF_TAGS=""
              fi
            fi
          fi
          
          echo "BASE_TAGS=$BASE_TAGS" >> $GITHUB_ENV
          echo "WAF_TAGS=$WAF_TAGS" >> $GITHUB_ENV
          echo "APP=$APP" >> $GITHUB_ENV
          echo "HAS_MODSECURITY=$HAS_MODSECURITY" >> $GITHUB_ENV
          echo "DOCKERFILE=docker/$APP/Dockerfile" >> $GITHUB_ENV
          echo "DOCKERFILE_BASE=docker/$APP/Dockerfile.base" >> $GITHUB_ENV
          echo "DIRECTORY=docker/$APP" >> $GITHUB_ENV
          echo "README=docker/$APP/README.md" >> $GITHUB_ENV

      - name: Create base Dockerfile (without ModSecurity)
        run: |
          if [[ "$HAS_MODSECURITY" -gt "0" ]]; then
            # Extract base version for Dockerfile.base
            if [[ "$TAG" == *"-"* ]]; then
              # For RC versions like 2.12.6-rc4, use base version 2.12.6
              BASE_VERSION=$(echo "$TAG" | cut -d'-' -f1)
            else
              # For release versions like 2.12.6, use the same version
              BASE_VERSION="$TAG"
            fi
            
            # Create a base version by creating a simplified Dockerfile
            cat > docker/$APP/Dockerfile.base << EOF
          FROM jc21/nginx-proxy-manager:2.12.6
          
          LABEL maintainer="Websoft9<help@websoft9.com>"
          LABEL version="$BASE_VERSION"
          
          COPY README.md /data/nginx/README.md
          RUN mkdir /data/nginx/custom
          RUN mkdir -p /etc/websoft9
          COPY ./config/http.conf /data/nginx/custom/http.conf
          COPY ./config/landing/ /etc/websoft9/landing
          COPY ./config/initproxy.conf /etc/websoft9/initproxy.conf
          COPY ./init_nginx.sh /app/init_nginx.sh
          RUN chmod +x /app/init_nginx.sh
          
          # Fix nginx startup issue with ip_ranges loading failure
          RUN export add_ip_data="const ipDataFile={[CLOUDFRONT_URL]:'ip-ranges.json',[CLOUDFARE_V4_URL]:'ips-v4',[CLOUDFARE_V6_URL]:'ips-v6'}[url];logger.info(ipDataFile);if(ipDataFile){return fs.readFile(__dirname+'/../lib/ipData/'+ipDataFile,'utf8',(error,data)=>{if(error){logger.error('fetch '+ipDataFile+' error');reject(error);return}logger.info('fetch '+ipDataFile+' success');resolve(data)})}" && \
              sed -i "s#url);#&${add_ip_data}#g" /app/internal/ip_ranges.js && \
              mkdir -p /app/lib/ipData && cd /app/lib/ipData && \
              curl -O https://ip-ranges.amazonaws.com/ip-ranges.json && \
              curl -O https://www.cloudflare.com/ips-v4 && \
              curl -O https://www.cloudflare.com/ips-v6
          
          # Add unified websockets support for all nginx proxies
          RUN proxy_line=("proxy_set_header Upgrade \$http_upgrade;" "proxy_set_header Connection upgrade;") && \
              proxy_path="/etc/nginx/conf.d/include/proxy.conf" && \
              length=${#proxy_line[@]} && \
              for ((i=0; i<$length; i++)); do \
              if ! grep -Fxq "${proxy_line[$i]}" $proxy_path; then \
              echo "${proxy_line[$i]}" >> $proxy_path; \
              fi; \
              done
          
          WORKDIR /app
          ENTRYPOINT ["/app/init_nginx.sh"]
          EOF
            echo "Created base Dockerfile without ModSecurity"
          fi
        if: env.HAS_MODSECURITY > 0
      
      ##------------ special task for apphub begin----------------------#
      - name: Trigger media.yml workflow
        uses: mathze/workflow-dispatch-action@v1.1.0
        id: startAndWaitWorkflow
        with:
          workflow-name: media.yml
          token: ${{github.token}}
          run-id: dummy
          wait-interval: PT10S
        if: env.APP == 'apphub' && env.MEDIA_FROM == 'source'

      - name: Reuse workflow run id
        run: "echo ${{ steps.startAndWaitWorkflow.outputs.run-id }}"
        if: env.APP == 'apphub' && env.MEDIA_FROM == 'source'

      - name: Download media.zip from artifacts
        uses: dawidd6/action-download-artifact@v8
        with:
          workflow: media.yml
          name: media
          path: ${{env.DIRECTORY}}
          github_token: ${{ secrets.MYGITHUB_ADMIN_TOKEN }}
          run_id: ${{ steps.startAndWaitWorkflow.outputs.run-id }}
        if: env.APP == 'apphub' && env.MEDIA_FROM == 'source'

      - name: Download media-latest.zip from Websoft9 artifact    
        run: |  
          curl -o media.zip https://artifact.websoft9.com/release/websoft9/plugin/media/media-latest.zip
        if: env.MEDIA_FROM == 'artifact'

        # release docker-library
      - name: Trigger docker-libaray/release.yml workflow
        uses: peter-evans/repository-dispatch@v2
        with:
          repository: websoft9/docker-library
          event-type: custom_event
          token: ${{secrets.MYGITHUB_ADMIN_TOKEN}}
        if: env.APP == 'apphub'
      
        # release media step1
      - name: Create more files
        run: |
          version_core=$(grep 'ARG MEDIA_VERSION' "docker/apphub/Dockerfile" | cut -d'"' -f2 | xargs)
          cp ${{env.DIRECTORY}}/media.zip media/media-latest.zip
          cp media/media-latest.zip media/media-$version_core.zip
          jq --arg version "$version_core" '.Version = $version' media/media.json > media/temp.json && mv media/temp.json media/media.json
        if: env.APP == 'apphub' && env.MEDIA_FROM == 'source'
      
        # release media step2
      - name: Upload To cloudflare r2
        uses: ryand56/r2-upload-action@latest
        with:
          r2-account-id: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          r2-access-key-id: ${{ secrets.CLOUDFLARE_R2_SECRET_ID }}
          r2-secret-access-key: ${{ secrets.CLOUDFLARE_R2_SECRET_KEY }}
          r2-bucket: artifact
          source-dir: media
          destination-dir: ./${{ env.CHANNEL }}/websoft9/plugin/media
        if: env.APP == 'apphub' && env.MEDIA_FROM == 'source'

      - name: Purge Cloudflare Cache
        uses: jakejarvis/cloudflare-purge-action@master
        env:
          CLOUDFLARE_ZONE: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          PURGE_URLS: '["https://artifact.websoft9.com/${{ env.CHANNEL }}/websoft9/plugin/media/media-latest.zip"]'
        if: env.APP == 'apphub' && env.MEDIA_FROM == 'source'      
      ##------------ special task for apphub end----------------------#



      - name: Build & push Docker image (Base version)
        uses: mr-smithers-excellent/docker-build-push@v6
        with:
          image: websoft9dev/${{env.APP}}
          tags: ${{env.BASE_TAGS}}
          registry: docker.io
          directory: ${{env.DIRECTORY}}
          dockerfile: ${{env.DOCKERFILE_BASE}}
          multiPlatform: true
          platform: linux/amd64
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        if: env.HAS_MODSECURITY > 0

      - name: Build & push Docker image (Regular version)
        uses: mr-smithers-excellent/docker-build-push@v6
        with:
          image: websoft9dev/${{env.APP}}
          tags: ${{env.BASE_TAGS}}
          registry: docker.io
          directory: ${{env.DIRECTORY}}
          dockerfile: ${{env.DOCKERFILE}}
          multiPlatform: true
          platform: linux/amd64
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        if: env.HAS_MODSECURITY == 0

      - name: Build & push Docker image (WAF version)
        uses: mr-smithers-excellent/docker-build-push@v6
        with:
          image: websoft9dev/${{env.APP}}
          tags: ${{env.WAF_TAGS}}
          registry: docker.io
          directory: ${{env.DIRECTORY}}
          dockerfile: ${{env.DOCKERFILE}}
          multiPlatform: true
          platform: linux/amd64
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        if: env.WAF_TAGS != ''

      - name: Docker Hub Description
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: websoft9dev/${{env.APP}}
          readme-filepath: ${{env.README}}
        if: needs.setup.outputs.matrix != ''
